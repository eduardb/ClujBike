buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'realm-android'

def getGitSha() {
    return 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim();
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.deveddy.clujbike"
        minSdkVersion 16
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        debug {
            ext.enableCrashlytics = false
            buildConfigField "String", "GIT_VERSION_SHA", "\"0\""
            testCoverageEnabled = true
        }
        leak {
        }
        leak.initWith(buildTypes.debug)
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "GIT_VERSION_SHA", "\"" + getGitSha() + "\""
        }
    }

    sourceSets.leak.setRoot('src/debug')

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile libraries.support.appCompat
    compile libraries.support.cardView
    compile libraries.support.design
    compile libraries.support.recyclerView
    compile libraries.support.supportAnnotation
    compile libraries.support.v4

    compile libraries.playServices.analytics
    compile libraries.playServices.maps

    //AutoValue
    provided libraries.app.autoValue
    apt libraries.app.autoValue
    apt libraries.app.autoValueParcelable

    //Butterknife
    compile libraries.app.butterKnife
    apt libraries.app.butterKnifeCompiler

    // Dagger 2
    compile libraries.app.dagger
    apt libraries.app.daggerCompiler
    provided libraries.app.javaxAnnotations

    //Retrofit 2
    compile libraries.app.retrofit
    compile libraries.app.retrofitAdapter
    compile libraries.app.retrofitConverter

    // RxJava
    compile libraries.app.rxAndroid
    compile libraries.app.rxJava
    compile libraries.app.rxBindings

    compile libraries.app.okHttp
    compile libraries.app.okHttpLogInterceptor

    //Timber
    compile libraries.app.timber

    // LeakCanary
    debugCompile libraries.tools.leakCanaryNoOp
    leakCompile libraries.tools.leakCanary
    releaseCompile libraries.tools.leakCanaryNoOp
    testCompile libraries.tools.leakCanaryNoOp

    // Dependencies for local unit tests
    testCompile libraries.unitTest.commonsIo
    testCompile libraries.unitTest.hamcrest
    testCompile libraries.unitTest.junit
    testCompile libraries.unitTest.mockito
    testCompile libraries.unitTest.okHttpWebServer

    // Android Testing Support Library's runner and rules
    androidTestCompile libraries.runner.runner
    androidTestCompile libraries.runner.rules

    // Espresso UI Testing dependencies.
    androidTestCompile libraries.uiTest.espressoCore
    androidTestCompile libraries.uiTest.espressoContrib
    androidTestCompile libraries.uiTest.espressoIntents
    androidTestCompile libraries.support.recyclerView
    androidTestCompile libraries.support.v4
}

/**
 Resolves dependency versions across test and production APKs, specifically, transitive
 dependencies. This is required since Espresso internally has a dependency on support-annotations.
 **/
configurations.all {
    resolutionStrategy.force libraries.support.supportAnnotation
}

/**
 All direct/transitive dependencies shared between your test and production APKs need to be
 excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
 excluding these dependencies from your test configuration will result in an dex pre-verifier error
 at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)te
 */

configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}
